---
title: "A quarto + knitr example with my phenomenal R code"
author: "José R. Ferrer-Paris"
date: "8 Dec 2023"
affiliation: 
 - "Centre for Ecosystem Science"
 - "UNSW codeRs"
format:
 html:
  code-fold: true
  code-tools: true
---

## <a title="Dustin Curtis, CC0, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Markdown-mark.svg"><img height="50" alt="Markdown-mark" src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/48/Markdown-mark.svg/128px-Markdown-mark.svg.png"></a>

Markdown combines both the clear reading experience from word processor documents with the benefits of software code documents, which is both versatile and easy to use—even for people that only know how to operate Word or Writer.

At first, Markdown was basically a small script [John Gruber](https://daringfireball.net/projects/markdown/) wrote for himself in 2004 to yield these benefits. 

In 2012 a group of developers form [CommonMark](https://spec.commonmark.org/) to standardise Markdown into an internationally accepted norm.

## <a title="quarto logo" href="https://quarto.org"><img height="50" alt="quarto logo" src="https://quarto.org/quarto.png"></a> 

An open-source scientific and technical publishing system. Quarto can use Jupyter notebooks or plain text markdown to create dynamic content or reproducible documents.

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

When you render a Quarto document, first knitr executes all of the code chunks and creates a new markdown (.md) document, which includes the code and its output. The markdown file generated is then processed by pandoc, which creates the finished format. The Render button in RStudio encapsulates these actions and executes them in the right order for you.

![How quarto + knitr work together](https://quarto.org/docs/get-started/hello/images/rstudio-qmd-how-it-works.png)

## This is my great R code

### Load the libraries
We need `magick` to read the images, `ggplot2` for plotting and and `cowplot` for arranging the grid of plots and images.

```{r}
library(ggplot2)
library(cowplot)
library(magick)
```

### Locate the images
We use the functions from package `here` to establish our project root, and then use the relative paths to the images

```{r}
here::i_am("presentation/showcase-your-research.qmd")
yes_img <- here::here("images/yes.png")
no_img <- here::here("images/no.png")
```

We use functions from `cowplot` to set up drawing layers in top of blank `ggplot2` canvas. This requires the `magick` package to read and manipulate the images internally.

```{r}
yes_plot <- ggdraw() + draw_image(yes_img, scale = 1)
no_plot <- ggdraw() + draw_image(no_img, scale = 1)
```

### This is a bad plot
Sometimes we do silly mistakes when we are learning to use a package. This is one example:
```{r}
#| label: badplot
#| fig-cap: This is not the way to use the colour aesthetic
(bad_plot <- 
  ggplot(mpg, aes(x = displ, y = hwy, colour = "blue")) +
  geom_point())
```

### This is a good plot
Adding layers of `ggplot2` functions allow us to customise plots and make them ready for publication.

```{r}
#| label: goodplot
#| fig-cap: This plot is so nice!
(good_plot <- 
  ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(colour = "blue") +
  geom_smooth(colour = "red") + 
  theme_half_open(12) +
  labs(x = "Engine power (litres displ.)",
       y = "Fuel Efficiency (miles/gallon)"))
```


### Interactive plots with plotly

Now that we have a nice plot we are ready to make this plot interactive with plotly. 

First load the library:

```{r}
library(plotly)
```

And take one last steps:

```{r}
#| label: goodplotly
#| fig-cap: This was easy!
ggplotly(good_plot)
```


### Conclusion

```{r}
#| label: meme
#| fig-cap: This grid shows the progress from novice to expert in `ggplot2`
plot_grid(no_plot, bad_plot,
          yes_plot, good_plot) 
```

